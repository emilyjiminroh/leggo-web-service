<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/style.css" type="text/css" />
    <style>
      .map_wrap,
      .map_wrap * {
        margin: 0;
        padding: 0;
        font-family: "Malgun Gothic", dotum, "돋움", sans-serif;
        font-size: 12px;
      }
      .map_wrap {
        position: relative;
        width: 100%;
        height: 350px;
      }
      #category {
        position: absolute;
        top: 10px;
        left: 10px;
        border-radius: 5px;
        border: 1px solid #909090;
        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.4);
        background: #fff;
        overflow: hidden;
        z-index: 2;
      }
      #category li {
        float: left;
        list-style: none;
        width: 50px;
        border-right: 1px solid #acacac;
        padding: 6px 0;
        text-align: center;
        cursor: pointer;
      }
      #category li.on {
        background: #eee;
      }
      #category li:hover {
        background: #ffe6e6;
        border-left: 1px solid #acacac;
        margin-left: -1px;
      }
      #category li:last-child {
        margin-right: 0;
        border-right: 0;
      }
      #category li span {
        display: block;
        margin: 0 auto 3px;
        width: 27px;
        height: 28px;
      }
      #category li .category_bg {
        background: url("img/places_category.png") no-repeat;
      }
      #category li .bank {
        background-position: -10px 0;
      }
      #category li .mart {
        background-position: -10px -36px;
      }
      #category li .pharmacy {
        background-position: -10px -72px;
      }
      #category li .oil {
        background-position: -10px -108px;
      }
      #category li .cafe {
        background-position: -10px -144px;
      }
      #category li .store {
        background-position: -10px -180px;
      }
      #category li.on .category_bg {
        background-position-x: -46px;
      }
      .placeinfo_wrap {
        position: absolute;
        bottom: 28px;
        left: -150px;
        width: 300px;
      }
      .placeinfo {
        position: relative;
        width: 100%;
        border-radius: 6px;
        border: 1px solid #ccc;
        border-bottom: 2px solid #ddd;
        padding-bottom: 10px;
        background: #fff;
      }
      .placeinfo:nth-of-type(n) {
        border: 0;
        box-shadow: 0px 1px 2px #888;
      }
      .placeinfo_wrap .after {
        content: "";
        position: relative;
        margin-left: -12px;
        left: 50%;
        width: 22px;
        height: 12px;
        background: url("https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white.png");
      }
      .placeinfo a,
      .placeinfo a:hover,
      .placeinfo a:active {
        color: #fff;
        text-decoration: none;
      }
      .placeinfo a,
      .placeinfo span {
        display: block;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
      }
      .placeinfo span {
        margin: 5px 5px 0 5px;
        cursor: default;
        font-size: 13px;
      }
      .placeinfo .title {
        font-weight: bold;
        font-size: 14px;
        border-radius: 6px 6px 0 0;
        margin: -1px -1px 0 -1px;
        padding: 10px;
        color: #fff;
        background: #d95050;
        background: #d95050
          url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/arrow_white.png)
          no-repeat right 14px center;
      }
      .placeinfo .tel {
        color: #0f7833;
      }
      .placeinfo .jibun {
        color: #999;
        font-size: 11px;
        margin-top: 0;
      }
    </style>
    <title>leggo Customized</title>
    <style>
      body {
        height: 10000px;
      }

      #container {
        overflow: hidden;
        height: 300px;
        position: relative;
      }
      #mapWrapper {
        width: 100%;
        height: 300px;
        z-index: 1;
      }
      #rvWrapper {
        width: 50%;
        height: 300px;
        top: 0;
        right: 0;
        position: absolute;
        z-index: 0;
      }
      #container.view_roadview #mapWrapper {
        width: 50%;
      }
      #roadviewControl {
        position: absolute;
        top: 5px;
        left: 5px;
        width: 42px;
        height: 42px;
        z-index: 1;
        cursor: pointer;
        background: url(https://t1.daumcdn.net/localimg/localimages/07/2018/pc/common/img_search.png)
          0 -450px no-repeat;
      }
      #roadviewControl.active {
        background-position: 0 -350px;
      }
      #close {
        position: absolute;
        padding: 4px;
        top: 5px;
        left: 5px;
        cursor: pointer;
        background: #fff;
        border-radius: 4px;
        border: 1px solid #c8c8c8;
        box-shadow: 0px 1px #888;
      }
      #close .img {
        display: block;
        background: url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/rv_close.png)
          no-repeat;
        width: 14px;
        height: 14px;
      }
    </style>
  </head>
  <body>
    <header>
      <div class="title_box">
        <img class="title title_img" src="img/leggo_logo.jpg" />
        <h1 class="title title_font">거동 취약계층 최적화🦽</h1>
      </div>
    </header>
    <nav class="menu" style="margin-bottom: 20px">
      <a href="/roadmap"><span class="nav_type">기본 길찾기 경로👟</span></a>
      <a href="/wheel"
        ><span class="nav_type">거동 취약계층 최적화 경로🦽</span></a
      >
      <a href="/howtogo"><span class="nav_type">길찾기 페이지로🚩</span></a>
    </nav>
    <h2>지하철역 사용시 안전발판(휠체어), 엘리베이터 위치 및 사용 안내</h2>
    <iframe
      src="http://www.seoulmetro.co.kr/kr/page.do?menuIdx=769"
      style="width: 90%; height: 400px"
    >
    </iframe>
    <h2>대중교통 사용시 최적화 경로👟</h2>
    <strong style="font-size: 20px">
      최대한 🪜계단이 없고, 🛣️경로 표면이 고르고, 🎢경로가 단순할 수 있도록
      지정했다</br> </strong><div style="font-size: 20px; margin-top:10px; font-weight: 700;">+ 로드뷰로 한 번 더 체크✅</div> 
    <div class="map_wrap">
      <div
        id="map"
        style="
          width: 80%;
          height: 90%;
          position: relative;
          overflow: hidden;
          margin-top: 20px;
        "
      ></div>

      <div
        id="roadview"
        style="width: 80%; height: 80%; margin-top: 20px"
      ></div>
      <ul id="category">
        <li id="BK9" data-order="0">
          <span class="category_bg bank"></span>
          은행
        </li>
        <li id="MT1" data-order="1">
          <span class="category_bg mart"></span>
          마트
        </li>
        <li id="PM9" data-order="2">
          <span class="category_bg pharmacy"></span>
          약국
        </li>
        <li id="OL7" data-order="3">
          <span class="category_bg oil"></span>
          주유소
        </li>
        <li id="CE7" data-order="4">
          <span class="category_bg cafe"></span>
          카페
        </li>
        <li id="CS2" data-order="5">
          <span class="category_bg store"></span>
          편의점
        </li>
        <li data-order="5" style="width: 65px">
          <span class="elevator" style="font-size: 20px">🛗</span>
          엘레베이터
        </li>
      </ul>
    </div>
    <div id="roadview" style="width: 750px; height: 290px"></div>
    <div style="margin-bottom: 100px">
      <h3>세종대학교 경로 <strong style="color: red">(빨간색)</strong></h3>
      <li>
        어린이대공원역 5번 출구 엘리베이터 -> 직진경로 -> 대양 AI 센터로 출입
      </li>
      <h3>
        어린이대공원 경로 <strong style="color: greenyellow">(초록색)</strong>
      </h3>
      <li>
        어린이대공원역 1번 출구 엘리베이터 -> 직진경로 -> 어린이대공원 정문으로
        출입
      </li>
      <h3>건국대학교 경로 <strong style="color: blue">(파란색)</strong></h3>
      <li>
        건대입구역 3번 출구 엘리베이터 -> 직진경로 -> 건대입구 생명과학 병동 및
        건대 병원으로 출입
      </li>
    </div>

    <script
      type="text/javascript"
      src="//dapi.kakao.com/v2/maps/sdk.js?appkey=8c9626a684ab7368231bf0b48c304d75&libraries=services"
    ></script>
    <script>
      // 마커를 클릭했을 때 해당 장소의 상세정보를 보여줄 커스텀오버레이입니다
      var placeOverlay = new kakao.maps.CustomOverlay({ zIndex: 1 }),
        contentNode = document.createElement("div"), // 커스텀 오버레이의 컨텐츠 엘리먼트 입니다
        markers = [], // 마커를 담을 배열입니다
        currCategory = ""; // 현재 선택된 카테고리를 가지고 있을 변수입니다

      var mapContainer = document.getElementById("map"), // 지도를 표시할 div
        mapOption = {
          center: new kakao.maps.LatLng(37.54909, 127.07513), // 지도의 중심좌표
          level: 4, // 지도의 확대 레벨
        };

      // 지도를 생성합니다
      var map = new kakao.maps.Map(mapContainer, mapOption);

      // 장소 검색 객체를 생성합니다
      var ps = new kakao.maps.services.Places(map);

      // 지도에 idle 이벤트를 등록합니다
      kakao.maps.event.addListener(map, "idle", searchPlaces);

      // 커스텀 오버레이의 컨텐츠 노드에 css class를 추가합니다
      contentNode.className = "placeinfo_wrap";

      // 커스텀 오버레이의 컨텐츠 노드에 mousedown, touchstart 이벤트가 발생했을때
      // 지도 객체에 이벤트가 전달되지 않도록 이벤트 핸들러로 kakao.maps.event.preventMap 메소드를 등록합니다
      addEventHandle(contentNode, "mousedown", kakao.maps.event.preventMap);
      addEventHandle(contentNode, "touchstart", kakao.maps.event.preventMap);

      // 커스텀 오버레이 컨텐츠를 설정합니다
      placeOverlay.setContent(contentNode);

      // 각 카테고리에 클릭 이벤트를 등록합니다
      addCategoryClickEvent();

      // 엘리먼트에 이벤트 핸들러를 등록하는 함수입니다
      function addEventHandle(target, type, callback) {
        if (target.addEventListener) {
          target.addEventListener(type, callback);
        } else {
          target.attachEvent("on" + type, callback);
        }
      }

      // 카테고리 검색을 요청하는 함수입니다
      function searchPlaces() {
        if (!currCategory) {
          return;
        }

        // 커스텀 오버레이를 숨깁니다
        placeOverlay.setMap(null);

        // 지도에 표시되고 있는 마커를 제거합니다
        removeMarker();

        ps.categorySearch(currCategory, placesSearchCB, { useMapBounds: true });
      }

      // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
      function placesSearchCB(data, status, pagination) {
        if (status === kakao.maps.services.Status.OK) {
          // 정상적으로 검색이 완료됐으면 지도에 마커를 표출합니다
          displayPlaces(data);
        } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
          // 검색결과가 없는경우 해야할 처리가 있다면 이곳에 작성해 주세요
        } else if (status === kakao.maps.services.Status.ERROR) {
          // 에러로 인해 검색결과가 나오지 않은 경우 해야할 처리가 있다면 이곳에 작성해 주세요
        }
      }

      // 지도에 마커를 표출하는 함수입니다
      function displayPlaces(places) {
        // 몇번째 카테고리가 선택되어 있는지 얻어옵니다
        // 이 순서는 스프라이트 이미지에서의 위치를 계산하는데 사용됩니다
        var order = document
          .getElementById(currCategory)
          .getAttribute("data-order");

        for (var i = 0; i < places.length; i++) {
          // 마커를 생성하고 지도에 표시합니다
          var marker = addMarker(
            new kakao.maps.LatLng(places[i].y, places[i].x),
            order
          );

          // 마커와 검색결과 항목을 클릭 했을 때
          // 장소정보를 표출하도록 클릭 이벤트를 등록합니다
          (function (marker, place) {
            kakao.maps.event.addListener(marker, "click", function () {
              displayPlaceInfo(place);
            });
          })(marker, places[i]);
        }
      }

      // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
      function addMarker(position, order) {
        var imageSrc =
            "https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_category.png", // 마커 이미지 url, 스프라이트 이미지를 씁니다
          imageSize = new kakao.maps.Size(27, 28), // 마커 이미지의 크기
          imgOptions = {
            spriteSize: new kakao.maps.Size(72, 208), // 스프라이트 이미지의 크기
            spriteOrigin: new kakao.maps.Point(46, order * 36), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
            offset: new kakao.maps.Point(11, 28), // 마커 좌표에 일치시킬 이미지 내에서의 좌표
          },
          markerImage = new kakao.maps.MarkerImage(
            imageSrc,
            imageSize,
            imgOptions
          ),
          marker = new kakao.maps.Marker({
            position: position, // 마커의 위치
            image: markerImage,
          });

        marker.setMap(map); // 지도 위에 마커를 표출합니다
        markers.push(marker); // 배열에 생성된 마커를 추가합니다

        return marker;
      }

      // 지도 위에 표시되고 있는 마커를 모두 제거합니다
      function removeMarker() {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(null);
        }
        markers = [];
      }

      // 클릭한 마커에 대한 장소 상세정보를 커스텀 오버레이로 표시하는 함수입니다
      function displayPlaceInfo(place) {
        var content =
          '<div class="placeinfo">' +
          '   <a class="title" href="' +
          place.place_url +
          '" target="_blank" title="' +
          place.place_name +
          '">' +
          place.place_name +
          "</a>";

        if (place.road_address_name) {
          content +=
            '    <span title="' +
            place.road_address_name +
            '">' +
            place.road_address_name +
            "</span>" +
            '  <span class="jibun" title="' +
            place.address_name +
            '">(지번 : ' +
            place.address_name +
            ")</span>";
        } else {
          content +=
            '    <span title="' +
            place.address_name +
            '">' +
            place.address_name +
            "</span>";
        }

        content +=
          '    <span class="tel">' +
          place.phone +
          "</span>" +
          "</div>" +
          '<div class="after"></div>';

        contentNode.innerHTML = content;
        placeOverlay.setPosition(new kakao.maps.LatLng(place.y, place.x));
        placeOverlay.setMap(map);
      }

      // 각 카테고리에 클릭 이벤트를 등록합니다
      function addCategoryClickEvent() {
        var category = document.getElementById("category"),
          children = category.children;

        for (var i = 0; i < children.length; i++) {
          children[i].onclick = onClickCategory;
        }
      }

      // 카테고리를 클릭했을 때 호출되는 함수입니다
      function onClickCategory() {
        var id = this.id,
          className = this.className;

        placeOverlay.setMap(null);

        if (className === "on") {
          currCategory = "";
          changeCategoryClass();
          removeMarker();
        } else {
          currCategory = id;
          changeCategoryClass(this);
          searchPlaces();
        }
      }

      // 클릭된 카테고리에만 클릭된 스타일을 적용하는 함수입니다
      function changeCategoryClass(el) {
        var category = document.getElementById("category"),
          children = category.children,
          i;

        for (i = 0; i < children.length; i++) {
          children[i].className = "";
        }

        if (el) {
          el.className = "on";
        }
      }

      var imageSrc = "img/elev_img.png", // 마커이미지의 주소입니다
        imageSize = new kakao.maps.Size(20, 20), // 마커이미지의 크기입니다
        imageOption = { offset: new kakao.maps.Point(27, 69) }; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.

      // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다
      var markerImage = new kakao.maps.MarkerImage(
        imageSrc,
        imageSize
        //imageOption
      );

      // 마커가 표시될 위치입니다
      var markerPosition = new kakao.maps.LatLng(37.547019, 127.073825);
      var markerPosition1 = new kakao.maps.LatLng(37.549008, 127.075408);
      var markerPosition2 = new kakao.maps.LatLng(37.540568, 127.068192);
      var markerPosition3 = new kakao.maps.LatLng(37.540772, 127.068624);
      var markerPosition4 = new kakao.maps.LatLng(37.540872, 127.071244);
      var markerPosition5 = new kakao.maps.LatLng(37.545439, 127.053592);
      var markerPosition6 = new kakao.maps.LatLng(37.544781, 127.054887);
      var markerPosition7 = new kakao.maps.LatLng(37.547117, 127.048129);
      var markerPosition8 = new kakao.maps.LatLng(37.537505, 127.087182);
      var markerPosition9 = new kakao.maps.LatLng(37.54855, 127.103789);
      var markerPosition10 = new kakao.maps.LatLng(37.544795, 127.104239);
      var markerPosition11 = new kakao.maps.LatLng(37.552137, 127.089222);
      var markerPosition12 = new kakao.maps.LatLng(37.551993, 127.089098);
      var markerPosition13 = new kakao.maps.LatLng(37.551912, 127.089676);
      var markerPosition14 = new kakao.maps.LatLng(37.565874, 127.084252);
      var markerPosition15 = new kakao.maps.LatLng(37.556842, 127.079707);

      // 마커를 생성합니다
      var marker = new kakao.maps.Marker({
        position: markerPosition,
        image: markerImage,
      });

      var marker1 = new kakao.maps.Marker({
        position: markerPosition1,
        image: markerImage,
      });
      var marker2 = new kakao.maps.Marker({
        position: markerPosition2,
        image: markerImage,
      });
      var marker3 = new kakao.maps.Marker({
        position: markerPosition3,
        image: markerImage,
      });
      var marker4 = new kakao.maps.Marker({
        position: markerPosition4,
        image: markerImage,
      });
      var marker5 = new kakao.maps.Marker({
        position: markerPosition5,
        image: markerImage,
      });
      var marker6 = new kakao.maps.Marker({
        position: markerPosition6,
        image: markerImage,
      });
      var marker7 = new kakao.maps.Marker({
        position: markerPosition7,
        image: markerImage,
      });
      var marker8 = new kakao.maps.Marker({
        position: markerPosition8,
        image: markerImage,
      });
      var marker9 = new kakao.maps.Marker({
        position: markerPosition9,
        image: markerImage,
      });
      var marker10 = new kakao.maps.Marker({
        position: markerPosition10,
        image: markerImage,
      });
      var marker11 = new kakao.maps.Marker({
        position: markerPosition11,
        image: markerImage,
      });

      var marker12 = new kakao.maps.Marker({
        position: markerPosition12,
        image: markerImage,
      });
      var marker13 = new kakao.maps.Marker({
        position: markerPosition13,
        image: markerImage,
      });
      var marker14 = new kakao.maps.Marker({
        position: markerPosition14,
        image: markerImage,
      });

      var marker15 = new kakao.maps.Marker({
        position: markerPosition15,
        image: markerImage,
      });

      // 마커가 지도 위에 표시되도록 설정합니다
      marker.setMap(map);
      marker1.setMap(map);
      marker2.setMap(map);
      marker3.setMap(map);
      marker4.setMap(map);
      marker5.setMap(map);
      marker6.setMap(map);
      marker7.setMap(map);
      marker8.setMap(map);
      marker9.setMap(map);
      marker10.setMap(map);
      marker11.setMap(map);
      marker12.setMap(map);
      marker14.setMap(map);
      marker13.setMap(map);
      marker15.setMap(map);

      var mapTypeControl = new kakao.maps.MapTypeControl();

      // 지도에 컨트롤을 추가해야 지도위에 표시됩니다
      // kakao.maps.ControlPosition은 컨트롤이 표시될 위치를 정의하는데 TOPRIGHT는 오른쪽 위를 의미합니다
      map.addControl(mapTypeControl, kakao.maps.ControlPosition.TOPRIGHT);

      // 지도 확대 축소를 제어할 수 있는  줌 컨트롤을 생성합니다
      var zoomControl = new kakao.maps.ZoomControl();
      map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);
      var linePath = [
        new kakao.maps.LatLng(37.548066, 127.07486),
        new kakao.maps.LatLng(37.548933, 127.075393),
        new kakao.maps.LatLng(37.550659, 127.076331),
        new kakao.maps.LatLng(37.550602, 127.076798),
      ];
      // 지도에 표시할 선을 생성합니다
      var polyline = new kakao.maps.Polyline({
        path: linePath, // 선을 구성하는 좌표배열 입니다
        strokeWeight: 5, // 선의 두께 입니다
        strokeColor: "#00FF00", // 선의 색깔입니다
        strokeOpacity: 0.7, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
        strokeStyle: "solid", // 선의 스타일입니다
      });
      // 지도에 선을 표시합니다
      polyline.setMap(map);
      var linePath1 = [
        new kakao.maps.LatLng(37.548066, 127.07486),
        new kakao.maps.LatLng(37.547692, 127.074142),
        new kakao.maps.LatLng(37.550894, 127.076192),
        new kakao.maps.LatLng(37.551009, 127.075877),
      ];
      // 지도에 표시할 선을 생성합니다
      var polyline = new kakao.maps.Polyline({
        path: linePath1, // 선을 구성하는 좌표배열 입니다
        strokeWeight: 5, // 선의 두께 입니다
        strokeColor: "#FF0000", // 선의 색깔입니다
        strokeOpacity: 0.7, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
        strokeStyle: "solid", // 선의 스타일입니다
      });
      // 지도에 선을 표시합니다
      polyline.setMap(map);
      var linePath3 = [
        new kakao.maps.LatLng(37.54091, 127.071115),
        new kakao.maps.LatLng(37.544027, 127.072761),
        new kakao.maps.LatLng(37.543881, 127.073817),
      ];
      // 지도에 표시할 선을 생성합니다
      var polyline = new kakao.maps.Polyline({
        path: linePath3, // 선을 구성하는 좌표배열 입니다
        strokeWeight: 5, // 선의 두께 입니다
        strokeColor: "	#0000FF", // 선의 색깔입니다
        strokeOpacity: 0.7, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
        strokeStyle: "solid", // 선의 스타일입니다
      });
      // 지도에 선을 표시합니다
      polyline.setMap(map);
      var roadviewContainer = document.getElementById("roadview"); //로드뷰를 표시할 div
      var roadview = new kakao.maps.Roadview(roadviewContainer); //로드뷰 객체
      var roadviewClient = new kakao.maps.RoadviewClient(); //좌표로부터 로드뷰 파노ID를 가져올 로드뷰 helper객체
      var position = new kakao.maps.LatLng(37.54909, 127.07513);
      // 특정 위치의 좌표와 가까운 로드뷰의 panoId를 추출하여 로드뷰를 띄운다.
      roadviewClient.getNearestPanoId(position, 50, function (panoId) {
        roadview.setPanoId(panoId, position); //panoId와 중심좌표를 통해 로드뷰 실행
      });
      // 로드뷰 초기화가 완료되었을 때 로드뷰에 마커나 커스텀오버레이를 표시한다
      kakao.maps.event.addListener(roadview, "init", function () {});
    </script>
  </body>
</html>
